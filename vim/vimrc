" .vimrc
"
" Author: Benjamin Jones <benjaminfjones@gmail.com>
"         with help from many others, in particular
"         Trevor Elliottt (https://github.com/elliottt).
"

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Prelude

let $VIMHOME = $HOME . '/.vim'

" required for Vundle.vim
set nocompatible
filetype off

" Set the leader as ';' instead of '\'
let mapleader      = ";"
let maplocalleader = ";"


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plugins (Vundle)

" set the runtime path to include Vundle.vim and initialize
set rtp+=$VIMHOME/bundle/Vundle.vim
call vundle#begin()

" Vundle
Plugin 'gmarik/Vundle.vim'

" The Pope
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-repeat'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-commentary'
Plugin 'tpope/vim-dispatch'
Plugin 'tpope/vim-markdown'
let g:markdown_fenced_languages = [ 'html', 'python', 'bash=sh', 'c', 'cpp',
                                  \ 'haskell', 'matlab']

" git gutter
Plugin 'airblade/vim-gitgutter'
let g:gitgutter_override_sign_column_highlight = 0
let g:gitgutter_sign_column_always = 1

" exchange.vim -- cx{motion} for first of pair, then cx{motion} swaps second
" with first
Plugin 'tommcdo/vim-exchange'

" Vim Wiki
Plugin 'vimwiki/vimwiki'
" remap key: toggle todo list item
nmap <Leader>tt <Plug>VimwikiToggleListItem

" Vim Lion - quick alignment
"
" e.g,
"     glip=
"     3gLi(,
"     glip/-->
"     <visual>gl=
"
Plugin 'tommcdo/vim-lion'

" Tabular (better for code formatting)
Plugin 'godlygeek/tabular'
nmap <Leader>a= :Tabularize /=<CR>
vmap <Leader>a= :Tabularize /=<CR>
nmap <Leader>a: :Tabularize /:\zs<CR>
vmap <Leader>a: :Tabularize /:\zs<CR>
nmap <Leader>a, :Tabularize /,<CR>
vmap <Leader>a, :Tabularize /,<CR>


" Haskell
Plugin 'elliottt/haskell-indent'
Plugin 'elliottt/vim-haskell'

Plugin 'itchyny/lightline.vim'
set laststatus=2  " enable status line and message line
set noshowmode    " turn off redundant mode display
let g:lightline = {
      \  'active': {
      \    'left': [ [ 'mode', 'paste' ], [ 'fugitive', 'relativepath' ] ],
      \    'right': [ [ 'percent', 'lineinfo' ], [ 'filetype' ] ]
      \  },
      \  'colorscheme': 'solarized'
      \}

" ctrl-p
Plugin 'kien/ctrlp.vim'
let g:ctrlp_map = '<space>'
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_working_path_mode = 'ra'
set wildignore+=*.o,*.hi,*/tmp/*,*.so,*.swp,*.zip,*.tgz,*.gz
let g:ctrlp_custom_ignore = {
    \ 'dir':  '\v[\/]\.(git|hg|svn|cabal\-sandbox|stack-work)$|[\/]dist$',
    \ 'file': '\v\.(exe|so|o|dll|dylib|a|hi)$',
    \ }

" Color scheme choices
Plugin 'altercation/vim-colors-solarized'
" Past themes:
" Plugin 'itchyny/landscape.vim'
" Plugin 'junegunn/seoul256.vim'
" Plugin 'nanotech/jellybeans.vim'

" Rename all the files with :Ren
Plugin 'renamer.vim'

" SAL syntax
Plugin 'benjaminfjones/sal-syntax'

" QFEnter - open quickfix/loclist items in splits, tabs, etc..
Plugin 'yssl/QFEnter'
let g:qfenter_open_map = ['<CR>']
let g:qfenter_vopen_map = ['<Leader>v']
let g:qfenter_hopen_map = ['<Leader>h']
let g:qfenter_topen_map = ['<Leader>t']

" Snippets
if v:version >= 704
    " UltiSnips!
    Plugin 'sirver/UltiSnips'
    Plugin 'honza/vim-snippets'
    " Trigger configuration
    let g:UltiSnipsExpandTrigger="<tab>"
    let g:UltiSnipsJumpForwardTrigger="<c-b>"
    let g:UltiSnipsJumpBackwardTrigger="<c-z>"
    let g:UltiSnipsEditSplit="vertical"
endif

" EasyMotion
Plugin 'easymotion/vim-easymotion'
map <Leader> <Plug>(easymotion-prefix)

" vim-grepper : async grep/ag'ing for Vim 8 and NeoVim
Plugin 'mhinz/vim-grepper'
let g:grepper = {
    \ 'tools': ['ag', 'git', 'grep'],
    \ 'open':  1,
    \ 'jump':  1,
    \ }
" The first two mappings open a prompt whereas the last one will search for
" the word under the cursor right away.
nnoremap <leader>git :Grepper -tool git -noswitch<cr>
nnoremap <leader>ag  :Grepper -tool ag  -grepprg ag --vimgrep -G '^.+\.txt'<cr>
nnoremap <leader>*   :Grepper -tool ag -cword -noprompt<cr>
nnoremap <leader>f   :Grepper -tool ag -cword -noprompt<cr>
command! -nargs=* AgFile Grepper -noprompt -tool ag -grepprg ag --vimgrep <args> %
command! -nargs=* Ag Grepper -noprompt -tool ag -grepprg ag --vimgrep <args>

" All Plugins must be added before the following line
call vundle#end()


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Post-plugin options

" Enable filetype detection
filetype plugin indent on

set ttyfast
set lazyredraw

set ignorecase smartcase

" Allow backspacing over everything
set backspace=indent,eol,start

" Incremental searching
set incsearch

" Cursor context
set scrolloff=3

" Define double <leader> to kill the search highlighting.
map <Leader><Leader> :noh<Enter>

" Always show cursor position
set ruler

" Fold by manually defined folds
set nofoldenable

" Syntax
if &t_Co > 2 || has("gui_running")
    syntax enable
    set hlsearch
endif

" Spell checking
if has("spell")
    setlocal spell spelllang=en_us
    set nospell
endif

" set text wrap width
set textwidth=78

" Highlight trailing space, and tab characters
set list lcs=tab:>-,trail:.

" Completion options
set wildmode=longest:full,list:full
set wildmenu
set wildignore=*.o,*.hi,*.swp,*.bc

" Colors!
set background=dark
try
    colorscheme solarized
catch /^Vim\%((\a\+)\)\=:E185/
    " deal with it
endtry

" reset highlighting
highlight Normal cterm=NONE ctermbg=NONE
highlight SignColumn ctermbg=Black

" Grey cursor line/col highlights
highlight CursorLine   term=bold cterm=bold guibg=Grey40
highlight CursorColumn term=bold cterm=bold guibg=Grey40
" set cursorline
nnoremap <Leader>c :set cursorcolumn!<CR>

" turn on line numbers
" set number

" Disable the arrow keys when in edit mode
inoremap <Up>    <NOP>
inoremap <Right> <NOP>
inoremap <Down>  <NOP>
inoremap <Left>  <NOP>

" Disable the help key
nnoremap <F1> <Esc>
inoremap <F1> <Esc>

" Set F2 as the binding to toggle the paste mode
set pastetoggle=<F2>

" Use F3 to toggle spelling
nnoremap <F3> :set spell!<CR>

" Swap files in one place
set directory=$VIMHOME/swap

" Disable the bell
set noerrorbells
set visualbell
set t_vb=

" Always expand tabs to spaces
set expandtab
set tabstop=4

" jk trick!
inoremap jk <Esc>

" Tab/buffer navigation via elliott
function! Next()
    if tabpagenr('$') > 1
        tabnext
    else
        bnext
    endif
endfunction

function! Prev()
    if tabpagenr('$') > 1
        tabprevious
    else
        bprevious
    endif
endfunction

nnoremap <silent> <C-n> :call Next()<Cr>
nnoremap <silent> <C-p> :call Prev()<Cr>

set nocursorcolumn
set nocursorline
set norelativenumber

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" macros

" create markdown style header below current line
let @h = "yypVr"
" format current selection
let @q = "{!}fmt"
" remove trailing whitespace
nnoremap <silent> <F5> :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar>:nohl<CR>

