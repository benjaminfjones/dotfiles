"""""""""""
" GLOBALS "
"""""""""""
let $VIMHOME = $HOME . '/.vim'

" required for Vundle.vim
set nocompatible
filetype off

"""""""""""
" BUNDLES "
"""""""""""

" set the runtime path to include Vundle.vim and initialize
set rtp+=$VIMHOME/bundle/Vundle.vim
call vundle#begin()

" Vundle
Plugin 'gmarik/Vundle.vim'

" The Pope
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-repeat'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-commentary'
Plugin 'tpope/vim-dispatch'
Plugin 'tpope/vim-markdown'
let g:markdown_fenced_languages = ['html', 'python', 'bash=sh', 'c', 'cpp', 'haskell', 'matlab']

" Kill buffer + window with <C-d> (mapping below)
Plugin 'mhinz/vim-sayonara'

" Vim Wiki
Plugin 'vimwiki/vimwiki'

" Vim Lion - quick alignment
"
" e.g,
"     glip=
"     3gLi(,
"     glip/-->
"     <visual>gl=
"
Plugin 'tommcdo/vim-lion'

" Tabular (better for code formatting)
Plugin 'godlygeek/tabular'
nmap <Leader>a= :Tabularize /=<CR>
vmap <Leader>a= :Tabularize /=<CR>
nmap <Leader>a: :Tabularize /:\zs<CR>
vmap <Leader>a: :Tabularize /:\zs<CR>
nmap <Leader>a, :Tabularize /,<CR>
vmap <Leader>a, :Tabularize /,<CR>


" Indenting
Plugin 'IndentAnything'

" Haskell
Plugin 'elliottt/haskell-indent'
Plugin 'elliottt/vim-haskell'

" Airline
Plugin 'bling/vim-airline'
set laststatus=2
if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif
let g:airline_powerline_fonts = 0
let g:airline_theme = 'simple'

" ctrl-p
Plugin 'kien/ctrlp.vim'
let g:ctrlp_map = '<space>'
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_working_path_mode = 'ra'
set wildignore+=*.o,*.hi,*/tmp/*,*.so,*.swp,*.zip,*.tgz,*.gz
let g:ctrlp_custom_ignore = {
    \ 'dir':  '\v[\/]\.(git|hg|svn|cabal\-sandbox)$|[\/]dist$',
    \ 'file': '\v\.(exe|so|dll)$',
    \ }

" Color scheme choices
Plugin 'altercation/vim-colors-solarized'
Plugin 'junegunn/seoul256.vim'
Plugin 'nanotech/jellybeans.vim'

" LaTeX
Plugin 'LaTeX-Box-Team/LaTeX-Box'
let g:LatexBox_viewer   = 'open -a Skim'
let g:LatexBox_quickfix = 2  " open quickfix but cursor stays in current window

" Rename all the files with :Ren
Plugin 'renamer.vim'

" SAL syntax
Plugin 'benjaminfjones/sal-syntax'

" ghc-mod
" key mappings in ~/.vim/after/ftplugin/haskell.vim
if executable('ghc-mod')
    Plugin 'Shougo/vimproc'
    Plugin 'eagletmt/ghcmod-vim'
endif

" Syntastic - syntax checking
Plugin 'scrooloose/syntastic'
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
" syntax checker selections
if executable('cppcheck')
    let g:syntastic_cpp_checkers = ['cppcheck']
endif
if executable('pylint')
    let g:syntastic_python_checkers = ['pylint']
endif
if executable('hlint')
    let g:syntastic_haskell_checkers = ['hlint']
endif


" DISABLED in favor of elliottt's vim-dispatchy version
" Ag searching with results in QuickFix window!
" Usage: :Ag [options] {pattern} [{directory}]
"
" Plugin 'rking/ag.vim'
" let g:ag_working_path_mode="r"  " always search from project root
" Note: In the quickfix window, you can use:
"
"     e    to open file and close the quickfix window
"     o    to open (same as enter)
"     go   to preview file (open but maintain focus on ag.vim results)
"     t    to open in new tab
"     T    to open in new tab silently
"     h    to open in horizontal split
"     H    to open in horizontal split silently
"     v    to open in vertical split
"     gv   to open in vertical split silently
"     q    to close the quickfix window


Plugin 'ARM9/arm-syntax-vim'
au BufNewFile,BufRead *.s,*.S set filetype=arm " arm = armv6/7

" All Plugins must be added before the following line
call vundle#end()


"== POST BUNDLE OPTIONS ===================================

" Set the leader as ';' instead of '\\'
let mapleader      = ";"
let maplocalleader = ";"

" Enable filetype detection
filetype plugin indent on

set ignorecase smartcase

" Allow backspacing over everything
set backspace=indent,eol,start

" Incremental searching
set incsearch

" Cursor context
set scrolloff=3

" Define double <leader> to kill the search highlighting.
map <Leader><Leader> :noh<Enter>

" Always show cursor position
set ruler

" Fold by manually defined folds
set foldenable

" Syntax
if &t_Co > 2 || has("gui_running")
    syntax enable
    set hlsearch
endif

" Spell checking
if has("spell")
    setlocal spell spelllang=en_us
    set nospell
endif

" set text wrap width
set textwidth=78

" Highlight trailing space, and tab characters, toggle with <leader>-s
set list lcs=tab:>-,trail:.
nmap <leader>s :set nolist!<CR>

" Completion options
set wildmode=longest:full,list:full
set wildmenu
set wildignore=*.o,*.hi,*.swp,*.bc

" Colors!
colors jellybeans
set bg=dark
" reset highlighting
highlight Normal cterm=NONE ctermbg=NONE

" Grey cursor line/col highlights
hi CursorLine   term=bold cterm=bold guibg=Grey40
hi CursorColumn term=bold cterm=bold guibg=Grey40
set cursorline
nnoremap <Leader>c :set cursorcolumn!<CR>

" Disable the arrow keys when in edit mode
inoremap <Up>    <NOP>
inoremap <Right> <NOP>
inoremap <Down>  <NOP>
inoremap <Left>  <NOP>

" Disable the help key
nnoremap <F1> <Esc>
inoremap <F1> <Esc>

" Set F2 as the binding to toggle the paste mode
set pastetoggle=<F2>

" Use F3 to toggle spelling
nnoremap <F3> :set spell!<CR>

" Swap files in one place
set directory=$VIMHOME/swap

" Silencio make! with <Leader>m
nnoremap <leader>m :silent make!\|redraw!\|cw<CR>

" Disable the bell
set noerrorbells
set visualbell
set t_vb=

" Map <Leader>s to sort the visual selection
vmap <Leader>s :sort<Cr>

" Always expand tabs to spaces
set expandtab
set tabstop=4
set shiftwidth=4

" jk trick!
inoremap jk <Esc>

" Tab/buffer navigation via elliott
function! Next()
    if tabpagenr('$') > 1
        tabnext
    else
        bnext
    endif
endfunction

function! Prev()
    if tabpagenr('$') > 1
        tabprevious
    else
        bprevious
    endif
endfunction

nnoremap <silent> <C-n> :call Next()<Cr>
nnoremap <silent> <C-p> :call Prev()<Cr>
nnoremap <silent> <C-d> :Sayonara<Cr>


"""""""""
" macros
"""""""""

let @h = "yypVr"       " create markdown style header below current line
let @q = "{!}fmt"      " format current selection
:nnoremap <Leader>w :%s/\s\+$//<CR>
:nnoremap <Leader>p :w !pbcopy<CR><CR>


" Search filesystem using 'ag'
" Credit: https://github.com/elliottt/vim-config
function FindPat(pat) abort
    let l:makeprg_bak     = &makeprg
    let l:errorformat_bak = &errorformat

    try
        let &l:makeprg     = 'ag --vimgrep -- ' . a:pat
        let &l:errorformat = "%f:%l:%c:%m"
        Make

    finally

        let &l:makeprg     = l:makeprg_bak
        let &l:errorformat = l:errorformat_bak
    endtry
endfunction

" Search commands: :Find arg1 arg2
"                  :Todo
command -nargs=1 Find call FindPat(<f-args>)
command -nargs=0 Todo call FindPat('TODO\|XXX')

" Grep for the word under the cursor
nnoremap <silent> <Leader>f yiw:Find '<C-r>"'<Cr>
